{"version":3,"file":"ethereumProvider.cjs.js","mappings":"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","sources":["webpack://@web3auth/ethereum-provider/webpack/bootstrap","webpack://@web3auth/ethereum-provider/webpack/runtime/compat get default export","webpack://@web3auth/ethereum-provider/webpack/runtime/define property getters","webpack://@web3auth/ethereum-provider/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/ethereum-provider/webpack/runtime/make namespace object","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/base-controllers\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/openlogin-jrpc\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@web3auth/base-provider\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"eth-rpc-errors\"","webpack://@web3auth/ethereum-provider/./src/rpc/walletMidddleware.ts","webpack://@web3auth/ethereum-provider/./src/rpc/ethRpcMiddlewares.ts","webpack://@web3auth/ethereum-provider/./src/rpc/jrpcClient.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/walletConnectUtils.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/WalletConnectProvider.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/index.ts","webpack://@web3auth/ethereum-provider/external commonjs2 \"@ethereumjs/tx\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@ethereumjs/util\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@metamask/eth-sig-util\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"assert\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"jsonschema\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"bignumber.js\"","webpack://@web3auth/ethereum-provider/./src/providers/converter.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/utils.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","webpack://@web3auth/ethereum-provider/external commonjs2 \"@ethereumjs/common\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"bn.js\"","webpack://@web3auth/ethereum-provider/./src/providers/utils.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/constants.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/index.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/index.ts","webpack://@web3auth/ethereum-provider/./src/providers/index.ts","webpack://@web3auth/ethereum-provider/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/base-controllers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/openlogin-jrpc\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-provider\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"eth-rpc-errors\");","import type { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { createAsyncMiddleware, createScaffoldMiddleware, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport type { MessageParams, TransactionParams, TypedMessageParams, WalletMiddlewareOptions } from \"./interfaces\";\n\nfunction resemblesAddress(str: string): boolean {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nexport function createWalletMiddleware({\n  getAccounts,\n  getPrivateKey,\n  processDecryptMessage,\n  processEncryptionPublicKey,\n  processEthSignMessage,\n  processPersonalMessage,\n  processTransaction,\n  processSignTransaction,\n  processTypedMessage,\n  processTypedMessageV3,\n  processTypedMessageV4,\n}: WalletMiddlewareOptions): JRPCMiddleware<string, unknown> {\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  }\n\n  //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n  async function validateAndNormalizeKeyholder(address: string, req: JRPCRequest<unknown>): Promise<string> {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts: string[] = await getAccounts(req);\n      const normalizedAccounts: string[] = accounts.map((_address) => _address.toLowerCase());\n      const normalizedAddress: string = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n    throw ethErrors.rpc.invalidParams({\n      message: `Invalid parameters: must provide an Ethereum address.`,\n    });\n  }\n\n  //\n  // account lookups\n  //\n\n  async function lookupAccounts(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  }\n\n  //\n  // transaction signatures\n  //\n\n  async function sendTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processSignTransaction) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const txParams: TransactionParams = (req.params as TransactionParams[])[0] || {\n      from: \"\",\n    };\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processSignTransaction(txParams, req);\n  }\n\n  //\n  // message signatures\n  //\n\n  async function ethSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEthSignMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: string = (req.params as string[])[1];\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const message: TypedDataV1 = (req.params as TypedDataV1[])[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[1], req);\n    const version = \"V1\";\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<TypedDataV1> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV3) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V3\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV4) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V4\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processPersonalMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    // process normally\n    const firstParam: string = (req.params as string[])[0];\n    const secondParam: string = (req.params as string[])[1];\n    // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n\n    // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n    let address: string, message: string;\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = `The eth_personalSign method requires params ordered `;\n      warning += `[message, address]. This was previously handled incorrectly, `;\n      warning += `and has been corrected automatically. `;\n      warning += `Please switch this param order for smooth behavior in the future.`;\n      (res as any).warning = warning;\n\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    // eslint-disable-next-line require-atomic-updates\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEncryptionPublicKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[0], req);\n\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processDecryptMessage) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n\n    const ciphertext: string = (req.params as string)[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[1], req);\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: ciphertext,\n    };\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!getPrivateKey) {\n      throw ethErrors.rpc.methodNotSupported();\n    }\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage),\n  });\n}\n","import {\n  createAsyncMiddleware,\n  createScaffoldMiddleware,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { AddEthereumChainParameter, IAccountHandlers, IChainSwitchHandlers, IProviderHandlers } from \"./interfaces\";\nimport { createWalletMiddleware } from \"./walletMidddleware\";\n\nexport function createEthMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processSignTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage,\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([\n    createScaffoldMiddleware({\n      eth_syncing: false,\n    }),\n    createWalletMiddleware({\n      getAccounts,\n      getPrivateKey,\n      processTransaction,\n      processEthSignMessage,\n      processSignTransaction,\n      processTypedMessage,\n      processTypedMessageV3,\n      processTypedMessageV4,\n      processPersonalMessage,\n      processEncryptionPublicKey,\n      processDecryptMessage,\n    }),\n  ]);\n  return ethMiddleware;\n}\n\nexport function createChainSwitchMiddleware({ addChain, switchChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  async function addNewChain(req: JRPCRequest<AddEthereumChainParameter[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n\n    res.result = await addChain(chainParams);\n  }\n  async function updateChain(req: JRPCRequest<{ chainId: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain),\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain),\n  });\n}\n\n// #region account middlewares\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  async function updateAccount(req: JRPCRequest<{ privateKey: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const accountParams = req.params?.length ? req.params[0] : undefined;\n    if (!accountParams?.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount),\n  });\n}\n\n// #endregion account middlewares\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport type { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: CustomChainConfig): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<CustomChainConfig>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createJsonRpcClient(providerConfig: CustomChainConfig): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { chainId, rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector, ITxData } from \"@walletconnect/types\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\n\nexport function getProviderHandlers({ connector }: { connector: IConnector }): IProviderHandlers {\n  return {\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getAccounts: async (_: JRPCRequest<unknown>) => {\n      const { accounts } = connector;\n      if (accounts && accounts.length) {\n        return accounts;\n      }\n      throw new Error(\"Failed to get accounts\");\n    },\n    processTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.sendTransaction(txParams as ITxData);\n      return result;\n    },\n    processSignTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTransaction(txParams as ITxData);\n      return result;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signMessage([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signPersonalMessage([msgParams.data, msgParams.from]);\n      return result;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const result = await connector.signTypedData([msgParams.from, msgParams.data]);\n      return result;\n    },\n    processEncryptionPublicKey: async (_: string): Promise<string> => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    processDecryptMessage: (_: MessageParams<string>): string => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n  };\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport type { IConnector } from \"@walletconnect/types\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, getChainConfig, isHexStrict, log, WalletInitializationError, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./walletConnectUtils\";\n\nexport interface WalletConnectProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface WalletConnectProviderState extends BaseProviderState {\n  accounts: string[];\n}\n\nexport class WalletConnectProvider extends BaseProvider<BaseProviderConfig, WalletConnectProviderState, IConnector> {\n  private connector: IConnector | null = null;\n\n  constructor({ config, state, connector }: { config: WalletConnectProviderConfig; state?: BaseProviderState; connector?: IConnector }) {\n    super({\n      config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 }, skipLookupNetwork: !!config.skipLookupNetwork },\n      state: { ...(state || {}), chainId: \"loading\", accounts: [] },\n    });\n    this.connector = connector || null;\n  }\n\n  public static getProviderInstance = async (params: {\n    connector: IConnector;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n    skipLookupNetwork: boolean;\n  }): Promise<WalletConnectProvider> => {\n    const providerFactory = new WalletConnectProvider({ config: { chainConfig: params.chainConfig, skipLookupNetwork: params.skipLookupNetwork } });\n    await providerFactory.setupProvider(params.connector);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(connector: IConnector): Promise<void> {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  public async switchChain({ chainId, addChain = true, lookup = true }: { chainId: string; addChain?: boolean; lookup?: boolean }): Promise<void> {\n    if (!this.connector)\n      throw ethErrors.provider.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    const currentChainConfig = this.getChainConfig(chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    const { rpcTarget, displayName } = currentChainConfig;\n    if (addChain) {\n      try {\n        await this.connector.sendCustomRequest({\n          method: \"wallet_addEthereumChain\",\n          params: [\n            {\n              chainId,\n              chainName: displayName,\n              rpcUrls: [rpcTarget],\n              blockExplorerUrls: [currentChainConfig.blockExplorer],\n              nativeCurrency: {\n                name: currentChainConfig.tickerName,\n                symbol: currentChainConfig.ticker,\n                decimals: currentChainConfig.decimals || 18,\n              },\n            },\n          ],\n        });\n      } catch (error) {\n        log.error(error);\n      }\n    }\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId }],\n      });\n    } catch (error) {\n      log.error(error);\n      // ignore this error because metamask & others return provider.result as null\n      // wallet connect thinks this is wrong\n      if (error.message !== \"JSON RPC response format is invalid\") {\n        throw error;\n      }\n    }\n\n    this.configure({ chainConfig: currentChainConfig });\n    if (lookup) await this.lookupNetwork(this.connector);\n  }\n\n  async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.connector) throw WalletInitializationError.notReady(\"Wallet adapter is not ready yet\");\n    const { rpcTarget, displayName } = chainConfig;\n\n    try {\n      await this.connector.sendCustomRequest({\n        method: \"wallet_addEthereumChain\",\n        params: [\n          {\n            chainId: chainConfig.chainId,\n            chainName: displayName,\n            rpcUrls: [rpcTarget],\n            blockExplorerUrls: [chainConfig.blockExplorer],\n            nativeCurrency: {\n              name: chainConfig.tickerName,\n              symbol: chainConfig.ticker,\n              decimals: chainConfig.decimals || 18,\n            },\n          },\n        ],\n      });\n      super.addChain(chainConfig);\n    } catch (error) {\n      log.error(error);\n      throw error;\n    }\n  }\n\n  protected async lookupNetwork(connector: IConnector): Promise<string> {\n    if (!connector.connected) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    const connectedHexChainId = isHexStrict(connector.chainId.toString()) ? connector.chainId : `0x${connector.chainId.toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.provider.emit(\"connect\", { chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return connectedHexChainId;\n  }\n\n  private async setupEngine(connector: IConnector): Promise<void> {\n    const providerHandlers = getProviderHandlers({ connector });\n    this.update({\n      accounts: connector.accounts || [],\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    if (!this.config.skipLookupNetwork) await this.lookupNetwork(connector);\n  }\n\n  private async onConnectorStateUpdate(connector: IConnector) {\n    connector.on(\"session_update\", async (error: Error | null, payload) => {\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n      if (error) {\n        this.provider.emit(\"error\", error);\n        return;\n      }\n      const { accounts, chainId: connectedChainId, rpcUrl }: { accounts?: string[]; chainId?: number; rpcUrl?: string } = payload.params[0];\n      // Check if accounts changed and trigger event\n      if (accounts?.length && this.state.accounts[0] !== accounts[0]) {\n        this.update({\n          accounts,\n        });\n        // await this.setupEngine(connector);\n        this.provider.emit(\"accountsChanged\", accounts);\n      }\n      const connectedHexChainId = `0x${connectedChainId.toString(16)}`;\n      // Check if chainId changed and trigger event\n      if (connectedChainId && this.state.chainId !== connectedHexChainId) {\n        const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedChainId) || {};\n        // Handle rpcUrl update\n        this.configure({\n          chainConfig: { ...maybeConfig, chainId: connectedHexChainId, rpcTarget: rpcUrl, chainNamespace: CHAIN_NAMESPACES.EIP155 },\n        });\n        await this.setupEngine(connector);\n      }\n    });\n  }\n}\n","export * from \"./WalletConnectProvider\";\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ethereumjs/tx\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ethereumjs/util\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@metamask/eth-sig-util\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"assert\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"jsonschema\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bignumber.js\");","import { stripHexPrefix } from \"@ethereumjs/util\";\nimport BigNumber from \"bignumber.js\";\n\ntype DenominationType = \"WEI\" | \"GWEI\" | \"ETH\";\ntype NumericBaseType = \"hex\" | \"dec\";\n\ntype ConverterInput = {\n  value: string | BigNumber;\n  fromNumericBase: NumericBaseType;\n  fromDenomination?: DenominationType;\n  toNumericBase?: NumericBaseType;\n  toDenomination?: DenominationType;\n  numberOfDecimals?: number;\n};\n// Big Number Constants\nconst BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\");\n\n// Setter Maps\nconst toBigNumber: Record<NumericBaseType, (n: string | BigNumber) => BigNumber> = {\n  hex: (n: string | BigNumber) => (typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16)),\n  dec: (n: string | BigNumber) => new BigNumber(n, 10),\n};\nconst toNormalizedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: (bigNumber) => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: (bigNumber) => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER),\n};\nconst toSpecifiedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP),\n  GWEI: (bigNumber) => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n  ETH: (bigNumber) => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n};\nconst baseChange: Record<string, (n: BigNumber) => string> = {\n  hex: (n) => n.toString(16),\n  dec: (n) => new BigNumber(n).toString(10),\n};\n\nconst converter = (params: ConverterInput): string | BigNumber => {\n  const { value, fromNumericBase, fromDenomination, toNumericBase, toDenomination, numberOfDecimals } = params;\n  let convertedValue: string | BigNumber = toBigNumber[fromNumericBase](value);\n\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue as BigNumber);\n  }\n\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue as BigNumber);\n  }\n\n  if (numberOfDecimals) {\n    convertedValue = (convertedValue as BigNumber).dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n  return convertedValue;\n};\n\nconst conversionUtil = (\n  value: string | BigNumber,\n  { fromNumericBase = \"hex\", toNumericBase, fromDenomination, toDenomination, numberOfDecimals }: Partial<ConverterInput>\n): BigNumber | string => {\n  return converter({\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    value: value || \"0\",\n  });\n};\n\nfunction decGWEIToHexWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\",\n  }) as string;\n}\n\nfunction hexWEIToDecGWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\",\n  }) as string;\n}\n\nexport { conversionUtil, decGWEIToHexWEI, hexWEIToDecGWEI };\n","import { isValidAddress } from \"@ethereumjs/util\";\nimport { SignTypedDataVersion, TYPED_MESSAGE_SCHEMA, TypedDataV1Field, typedSignatureHash } from \"@metamask/eth-sig-util\";\nimport { get } from \"@toruslabs/http-helpers\";\nimport { isHexStrict } from \"@web3auth/base\";\nimport assert from \"assert\";\nimport { BigNumber } from \"bignumber.js\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport jsonschema from \"jsonschema\";\n\nimport { TypedMessageParams } from \"../../../rpc/interfaces\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { EIP1159GasData, LegacyGasData } from \"./interfaces\";\n\nexport function normalizeGWEIDecimalNumbers(n: string | BigNumber): string {\n  const numberAsWEIHex = decGWEIToHexWEI(n);\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex);\n  return numberAsGWEI;\n}\n\nexport async function fetchEip1159GasEstimates(url: string): Promise<EIP1159GasData> {\n  const estimates = await get<EIP1159GasData>(url);\n  const normalizedEstimates = {\n    ...estimates,\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    low: {\n      ...estimates.low,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas),\n    },\n    medium: {\n      ...estimates.medium,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas),\n    },\n    high: {\n      ...estimates.high,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas),\n    },\n  };\n  return normalizedEstimates;\n}\n\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\nexport async function fetchLegacyGasPriceEstimates(url: string): Promise<LegacyGasData> {\n  const result = await get<{\n    SafeGasPrice: string;\n    ProposeGasPrice: string;\n    FastGasPrice: string;\n  }>(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n    mode: \"cors\",\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice,\n  };\n}\n\nexport const validateTypedMessageParams = (parameters: TypedMessageParams<unknown>, activeChainId: number) => {\n  try {\n    assert.ok(parameters && typeof parameters === \"object\", \"Params must be an object.\");\n    assert.ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n    assert.ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n    assert.ok(\n      typeof parameters.from === \"string\" && isValidAddress(parameters.from),\n      '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.'\n    );\n    let data = null;\n    let chainId = null;\n    switch ((parameters as TypedMessageParams<unknown>).version) {\n      case SignTypedDataVersion.V1:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n        assert.ok(Array.isArray(data as unknown), \"params.data must be an array.\");\n        assert.doesNotThrow(() => {\n          typedSignatureHash(data as TypedDataV1Field[]);\n        }, \"Signing data must be valid EIP-712 typed data.\");\n        break;\n      case SignTypedDataVersion.V3:\n      case SignTypedDataVersion.V4:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n\n        assert.ok(data.primaryType in data.types, `Primary type of \"${data.primaryType}\" has no type definition.`);\n        const validation = jsonschema.validate(data, TYPED_MESSAGE_SCHEMA.properties);\n        assert.strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n        chainId = data.domain?.chainId;\n        if (chainId) {\n          assert.ok(!Number.isNaN(activeChainId), `Cannot sign messages for chainId \"${chainId}\", because Web3Auth is switching networks.`);\n          if (typeof chainId === \"string\") {\n            chainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n          }\n          assert.strictEqual(chainId, activeChainId, `Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`);\n        }\n        break;\n      default:\n        assert.fail(`Unknown typed data version \"${(parameters as TypedMessageParams<unknown>).version}\"`);\n    }\n  } catch (error) {\n    throw ethErrors.rpc.invalidInput({\n      message: error?.message,\n    });\n  }\n};\n","import { TransactionFactory } from \"@ethereumjs/tx\";\nimport { privateToAddress, stripHexPrefix } from \"@ethereumjs/util\";\nimport {\n  decrypt,\n  EthEncryptedData,\n  getEncryptionPublicKey,\n  MessageTypes,\n  personalSign,\n  signTypedData,\n  SignTypedDataVersion,\n  TypedDataV1,\n  TypedMessage,\n} from \"@metamask/eth-sig-util\";\nimport { SafeEventEmitterProvider, signMessage } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { isHexStrict, log } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\nimport { validateTypedMessageParams } from \"./TransactionFormatter/utils\";\n\nasync function signTx(txParams: TransactionParams & { gas?: string }, privKey: string, txFormatter: TransactionFormatter): Promise<Buffer> {\n  const finalTxParams = await txFormatter.formatTransaction(txParams);\n  const common = await txFormatter.getCommonConfiguration();\n  const unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n    common,\n  });\n  const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n  return signedTx;\n}\n\nexport function getProviderHandlers({\n  txFormatter,\n  privKey,\n  getProviderEngineProxy,\n}: {\n  txFormatter: TransactionFormatter;\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): IProviderHandlers {\n  return {\n    getAccounts: async (_: JRPCRequest<unknown>) => [`0x${privateToAddress(Buffer.from(privKey, \"hex\")).toString(\"hex\")}`],\n    getPrivateKey: async (_: JRPCRequest<unknown>) => privKey,\n    processTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      const txHash = await providerEngineProxy.request<string[], string>({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))],\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      return `0x${signedTx.toString(\"hex\")}`;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({ privateKey: privKeyBuffer, data: msgParams.data });\n      return sig;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      const params = {\n        ...msgParams,\n        version: SignTypedDataVersion.V1,\n      };\n      validateTypedMessageParams(params, finalChainId);\n      const data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V1 });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V3 });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw ethErrors.provider.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<unknown, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V4 });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address: string, _: JRPCRequest<unknown>): Promise<string> => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): string => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({ encryptedData: JSON.parse(buff.toString(\"utf8\")) as EthEncryptedData, privateKey: privKey });\n      return decrypted;\n    },\n  };\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ethereumjs/common\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","import { addHexPrefix, stripHexPrefix } from \"@ethereumjs/util\";\nimport { BigNumber } from \"bignumber.js\";\nimport BN from \"bn.js\";\n\nexport function bnLessThan(a, b) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n  return new BigNumber(a, 10).lt(b, 10);\n}\n\nexport function bnToHex(inputBn: BN) {\n  return addHexPrefix(inputBn.toString(16));\n}\n\nexport function hexToBn(inputHex: string): BN {\n  if (BN.isBN(inputHex)) return inputHex;\n  return new BN(stripHexPrefix(inputHex), 16);\n}\n\nexport function BnMultiplyByFraction(targetBN: BN, numerator: number | string, denominator: number | string): BN {\n  const numberBN = new BN(numerator);\n  const denomBN = new BN(denominator);\n  return targetBN.mul(numberBN).div(denomBN);\n}\n","export const LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nexport const EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nexport const TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\",\n};\n\nexport const TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\",\n};\n\nexport const GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\",\n};\n","import { Common, Hardfork } from \"@ethereumjs/common\";\nimport { addHexPrefix, stripHexPrefix } from \"@ethereumjs/util\";\nimport { Block } from \"@toruslabs/base-controllers\";\nimport { CustomChainConfig, log, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { TransactionParams } from \"../../../rpc/interfaces\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { bnLessThan, BnMultiplyByFraction, bnToHex, hexToBn } from \"../../utils\";\nimport { EIP1559APIEndpoint, GAS_ESTIMATE_TYPES, LegacyGasAPIEndpoint, TRANSACTION_ENVELOPE_TYPES, TRANSACTION_TYPES } from \"./constants\";\nimport { EIP1159GasData, FallbackGasData, GasData, LegacyGasData, TxType } from \"./interfaces\";\nimport { fetchEip1159GasEstimates, fetchLegacyGasPriceEstimates } from \"./utils\";\n\nexport class TransactionFormatter {\n  private chainConfig: CustomChainConfig | null = null;\n\n  private getProviderEngineProxy: () => SafeEventEmitterProvider;\n\n  private isEIP1559Compatible = false;\n\n  constructor({ getProviderEngineProxy }: { getProviderEngineProxy: () => SafeEventEmitterProvider }) {\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n\n  get providerProxy() {\n    return this.getProviderEngineProxy();\n  }\n\n  async init(): Promise<void> {\n    this.chainConfig = (await this.providerProxy.request<CustomChainConfig>({ method: \"eth_provider_config\", params: [] })) as CustomChainConfig;\n    this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n  }\n\n  async getCommonConfiguration(): Promise<Common> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const { displayName: name, chainId } = this.chainConfig;\n    const hardfork = this.isEIP1559Compatible ? Hardfork.London : Hardfork.Berlin;\n    const customChainParams = {\n      name,\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork,\n    };\n    return Common.custom(customChainParams);\n  }\n\n  async formatTransaction(txParams: TransactionParams & { gas?: string }): Promise<TransactionParams & { gas?: string }> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n\n    const clonedTxParams = {\n      ...txParams,\n    };\n\n    if (clonedTxParams.nonce === undefined)\n      clonedTxParams.nonce = (await this.providerProxy.request<number>({\n        method: \"eth_getTransactionCount\",\n        params: [txParams.from, \"latest\"],\n      })) as number;\n\n    if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n      if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n      if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas;\n      // if gas is not provided explicitly, estimate it.\n      if (!clonedTxParams.gas) {\n        const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n        if (defaultGasLimit) {\n          clonedTxParams.gasLimit = defaultGasLimit;\n        }\n      } else {\n        clonedTxParams.gasLimit = clonedTxParams.gas;\n      }\n      return clonedTxParams;\n    }\n\n    if (!clonedTxParams.gas) {\n      const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n      if (defaultGasLimit) {\n        clonedTxParams.gasLimit = defaultGasLimit;\n      }\n    } else {\n      clonedTxParams.gasLimit = clonedTxParams.gas;\n    }\n\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas,\n    } = await this.getDefaultGasFees(clonedTxParams);\n\n    if (this.isEIP1559Compatible) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n        clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n\n        clonedTxParams.maxPriorityFeePerGas = bnLessThan(\n          typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas,\n          typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice\n        )\n          ? defaultMaxPriorityFeePerGas\n          : clonedTxParams.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n\n        if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n\n        if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          clonedTxParams.maxFeePerGas = defaultGasPrice;\n        }\n\n        if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available  then we set maxPriorityFeePerGas to\n          // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n        }\n      }\n\n      // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n      delete clonedTxParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n\n      delete clonedTxParams.maxPriorityFeePerGas;\n      delete clonedTxParams.maxFeePerGas;\n    }\n\n    // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n    if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n      clonedTxParams.gasPrice = defaultGasPrice as never;\n    }\n\n    clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    clonedTxParams.chainId = this.chainConfig.chainId;\n    return clonedTxParams;\n  }\n\n  private async fetchEthGasPriceEstimate(): Promise<{ gasPrice: string }> {\n    const gasPrice = (await this.providerProxy.request<string>({ method: \"eth_gasPrice\", params: [] })) as string;\n    return {\n      gasPrice: hexWEIToDecGWEI(gasPrice).toString(),\n    };\n  }\n\n  private async getEIP1559Compatibility(): Promise<boolean> {\n    const latestBlock = await this.providerProxy.request<Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] });\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n\n    return !!supportsEIP1559;\n  }\n\n  private async fetchGasFeeEstimateData(): Promise<GasData> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n\n    const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n\n    let gasData: GasData;\n\n    try {\n      if (this.isEIP1559Compatible) {\n        // TODO: kovan is not working due to a bug in metamask api\n        const estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch (e: unknown) {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate();\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n        };\n      } catch (error: unknown) {\n        throw new Error(`Gas fee/price estimation failed. Message: ${(error as Error).message}`);\n      }\n    }\n    return gasData;\n  }\n\n  private async getDefaultGasFees(\n    txParams: TransactionParams & { gas?: string }\n  ): Promise<{ gasPrice?: string; maxFeePerGas?: string; maxPriorityFeePerGas?: string }> {\n    if ((!this.isEIP1559Compatible && txParams.gasPrice) || (this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas)) {\n      return {};\n    }\n\n    try {\n      const { gasFeeEstimates, gasEstimateType } = await this.fetchGasFeeEstimateData();\n      if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        const { medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {} } = gasFeeEstimates as EIP1159GasData;\n\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n            maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas)),\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as LegacyGasData).medium)),\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as FallbackGasData).gasPrice)),\n        };\n      }\n    } catch (error) {\n      log.error(error);\n    }\n\n    const { gasPrice } = await this.fetchEthGasPriceEstimate();\n\n    return { gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice)) };\n  }\n\n  private async estimateTxGas(txMeta: TransactionParams): Promise<string> {\n    const txParams = { ...txMeta };\n\n    // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n    const gas = (await this.providerProxy.request<string>({ method: \"eth_estimateGas\", params: [txParams] })) as string;\n    return gas;\n  }\n\n  private async analyzeGasUsage(txMeta: TransactionParams): Promise<{\n    blockGasLimit: string;\n    estimatedGasHex: string;\n  }> {\n    const block = (await this.providerProxy.request<Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] })) as Block;\n    // fallback to block gasLimit\n    const blockGasLimitBN = hexToBn(block.gasLimit as string);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error: unknown) {\n      log.warn(error);\n    }\n    return { blockGasLimit: block.gasLimit as string, estimatedGasHex };\n  }\n\n  private addGasBuffer(initialGasLimitHex: string, blockGasLimitHex: string, multiplier = 1.5): string {\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n    const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier);\n\n    // if initialGasLimit is above blockGasLimit, dont modify it\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn);\n    // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn);\n    // otherwise use blockGasLimit\n    return bnToHex(upperGasLimitBn);\n  }\n\n  private async determineTransactionCategory(txParameters: TransactionParams & { gas?: string }): Promise<{\n    transactionCategory: TxType | null;\n    code?: string;\n  }> {\n    const { data, to } = txParameters;\n    let code = \"\";\n\n    let txCategory: TxType | null;\n\n    if (data && !to) {\n      txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    } else {\n      try {\n        code = (await this.providerProxy.request<string>({ method: \"eth_getCode\", params: [to, \"latest\"] })) as string;\n      } catch (error) {\n        log.warn(error);\n      }\n      const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n\n      txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    }\n\n    return { transactionCategory: txCategory, code };\n  }\n\n  private async getDefaultGasLimit(txParams: TransactionParams & { gas?: string }): Promise<string> {\n    const { transactionCategory } = await this.determineTransactionCategory({ ...txParams });\n\n    if (txParams.gas) {\n      return txParams.gas;\n    }\n\n    if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n      }\n\n      const TWENTY_ONE_THOUSAND = 21_000;\n\n      // This is a standard ether simple send, gas requirement is exactly 21k\n      return addHexPrefix(TWENTY_ONE_THOUSAND.toString(16));\n    }\n\n    const { blockGasLimit, estimatedGasHex } = await this.analyzeGasUsage(txParams);\n\n    // add additional gas buffer to our estimation for safety\n    const gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit as string);\n    return gasLimit;\n  }\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createAccountMiddleware, createChainSwitchMiddleware, createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { AddEthereumChainParameter, IAccountHandlers, IChainSwitchHandlers } from \"../../rpc/interfaces\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./ethPrivatekeyUtils\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\n\nexport interface EthereumPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface EthereumPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class EthereumPrivateKeyProvider extends BaseProvider<BaseProviderConfig, EthereumPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: EthereumPrivKeyProviderConfig; state?: EthereumPrivKeyProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<EthereumPrivateKeyProvider> => {\n    const providerFactory = new EthereumPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const txFormatter = new TransactionFormatter({\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const providerHandlers = getProviderHandlers({\n      txFormatter,\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    // Not a partial anymore because of checks in ctor\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await txFormatter.init();\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"eth_private_key\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    if (!chainId) throw ethErrors.rpc.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request<string[], string>({\n      method: \"net_version\",\n      params: [],\n    });\n\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw ethErrors.provider.chainDisconnected(`Invalid network, net_version is: ${network}`);\n    if (this.state.chainId !== chainId) {\n      this._providerEngineProxy.emit(\"chainChanged\", chainId);\n      this._providerEngineProxy.emit(\"connect\", { chainId });\n    }\n    this.update({ chainId });\n    return network;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addChain: async (params: AddEthereumChainParameter): Promise<void> => {\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = params;\n        this.addChain({\n          chainNamespace: \"eip155\",\n          chainId,\n          ticker: nativeCurrency?.symbol || \"ETH\",\n          tickerName: nativeCurrency?.name || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 18,\n        });\n      },\n      switchChain: async (params: { chainId: string }): Promise<void> => {\n        const { chainId } = params;\n        await this.switchChain({ chainId });\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (params: { privateKey: string }): Promise<void> => {\n        const { privateKey } = params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","export * from \"./EthereumPrivateKeyProvider\";\nexport * from \"./ethPrivatekeyUtils\";\nexport * from \"./TransactionFormatter\";\n","export * from \"./injectedProviders\";\nexport * from \"./privateKeyProviders\";\n","export * from \"./providers\";\n"],"names":["createAsyncMiddleware","createScaffoldMiddleware","ethErrors","resemblesAddress","str","length","createWalletMiddleware","getAccounts","getPrivateKey","processDecryptMessage","processEncryptionPublicKey","processEthSignMessage","processPersonalMessage","processTransaction","processSignTransaction","processTypedMessage","processTypedMessageV3","processTypedMessageV4","Error","validateAndNormalizeKeyholder","address","req","accounts","normalizedAccounts","map","_address","toLowerCase","normalizedAddress","includes","rpc","invalidParams","message","lookupAccounts","res","result","lookupDefaultAccount","sendTransaction","methodNotSupported","txParams","params","from","signTransaction","ethSign","extraParams","msgParams","data","signTypedData","version","signTypedDataV3","signTypedDataV4","personalSign","firstParam","secondParam","warning","encryptionPublicKey","decryptMessage","ciphertext","fetchPrivateKey","eth_accounts","eth_private_key","private_key","eth_coinbase","eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt","mergeMiddleware","createEthMiddleware","providerHandlers","ethMiddleware","eth_syncing","createChainSwitchMiddleware","addChain","switchChain","addNewChain","chainParams","undefined","chainId","rpcUrls","nativeCurrency","updateChain","wallet_addEthereumChain","wallet_switchEthereumChain","createAccountMiddleware","updatePrivatekey","updateAccount","accountParams","privateKey","wallet_updateAccount","createFetchMiddleware","createChainIdMiddleware","next","end","method","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","networkMiddleware","getProviderHandlers","connector","_","signMessage","signPersonalMessage","providerFromEngine","JRPCEngine","CHAIN_NAMESPACES","getChainConfig","isHexStrict","log","WalletInitializationError","WalletLoginError","BaseProvider","WalletConnectProvider","constructor","config","state","chainConfig","chainNamespace","EIP155","skipLookupNetwork","enable","provider","custom","code","setupProvider","_providerEngineProxy","request","onConnectorStateUpdate","setupEngine","lookup","currentChainConfig","update","displayName","sendCustomRequest","chainName","blockExplorerUrls","blockExplorer","name","tickerName","symbol","ticker","decimals","error","configure","lookupNetwork","notReady","connected","notConnectedError","connectedHexChainId","toString","rpcConnectionError","emit","engine","push","updateProviderEngineProxy","on","payload","connectedChainId","rpcUrl","maybeConfig","providerFactory","stripHexPrefix","BigNumber","BIG_NUMBER_WEI_MULTIPLIER","BIG_NUMBER_GWEI_MULTIPLIER","BIG_NUMBER_ETH_MULTIPLIER","toBigNumber","hex","n","dec","toNormalizedDenomination","WEI","bigNumber","div","GWEI","ETH","toSpecifiedDenomination","times","dp","ROUND_HALF_UP","baseChange","converter","value","fromNumericBase","fromDenomination","toNumericBase","toDenomination","numberOfDecimals","convertedValue","ROUND_HALF_DOWN","conversionUtil","decGWEIToHexWEI","decGWEI","hexWEIToDecGWEI","isValidAddress","SignTypedDataVersion","TYPED_MESSAGE_SCHEMA","typedSignatureHash","get","assert","jsonschema","normalizeGWEIDecimalNumbers","numberAsWEIHex","numberAsGWEI","fetchEip1159GasEstimates","url","estimates","normalizedEstimates","estimatedBaseFee","low","suggestedMaxPriorityFeePerGas","suggestedMaxFeePerGas","medium","high","fetchLegacyGasPriceEstimates","referrer","referrerPolicy","mode","SafeGasPrice","ProposeGasPrice","FastGasPrice","validateTypedMessageParams","parameters","activeChainId","ok","V1","doesNotThrow","JSON","parse","Array","isArray","V3","V4","primaryType","types","validation","validate","properties","strictEqual","errors","domain","Number","isNaN","parseInt","fail","invalidInput","TransactionFactory","privateToAddress","decrypt","getEncryptionPublicKey","signTx","privKey","txFormatter","finalTxParams","formatTransaction","common","getCommonConfiguration","unsignedEthTx","fromTxData","signedTx","sign","Buffer","serialize","getProviderEngineProxy","providerEngineProxy","txHash","concat","rawMessageSig","privKeyBuffer","sig","debug","finalChainId","info","stripped","buff","decrypted","encryptedData","addHexPrefix","BN","bnLessThan","a","b","lt","bnToHex","inputBn","hexToBn","inputHex","isBN","BnMultiplyByFraction","targetBN","numerator","denominator","numberBN","denomBN","mul","LegacyGasAPIEndpoint","EIP1559APIEndpoint","TRANSACTION_ENVELOPE_TYPES","LEGACY","ACCESS_LIST","FEE_MARKET","TRANSACTION_TYPES","SENT_ETHER","CONTRACT_INTERACTION","DEPLOY_CONTRACT","STANDARD_TRANSACTION","GAS_ESTIMATE_TYPES","ETH_GASPRICE","NONE","Common","Hardfork","TransactionFormatter","providerProxy","init","isEIP1559Compatible","getEIP1559Compatibility","hardfork","London","Berlin","customChainParams","networkId","defaultHardfork","clonedTxParams","nonce","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gas","defaultGasLimit","getDefaultGasLimit","gasLimit","defaultGasPrice","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","getDefaultGasFees","type","fetchEthGasPriceEstimate","latestBlock","supportsEIP1559","baseFeePerGas","fetchGasFeeEstimateData","isLegacyGasAPICompatible","gasData","replace","gasFeeEstimates","gasEstimateType","e","estimateTxGas","txMeta","analyzeGasUsage","block","blockGasLimitBN","saferGasLimitBN","estimatedGasHex","warn","blockGasLimit","addGasBuffer","initialGasLimitHex","blockGasLimitHex","multiplier","initialGasLimitBn","blockGasLimitBn","upperGasLimitBn","muln","bufferedGasLimitBn","gt","determineTransactionCategory","txParameters","to","txCategory","codeIsEmpty","transactionCategory","TWENTY_ONE_THOUSAND","EthereumPrivateKeyProvider","bind","chainSwitchMiddleware","getChainSwitchMiddleware","getAccountMiddleware","existingKey","network","chainDisconnected","chainSwitchHandlers","accountHandlers"],"sourceRoot":""}