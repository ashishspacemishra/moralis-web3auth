{"version":3,"file":"openloginAdapter.cjs.js","mappings":";;;;;;;AAAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,sDAAsD;WACtD,sCAAsC,iEAAiE;WACvG;WACA;WACA;WACA;WACA;WACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;ACNA,MAAM,yBAA4B;;;ACAgC;AAI3D,MAAME,0BAA0B,GAAG,MAA+B;EACvE,OAAO;IACLC,eAAe,EAAE;MACfC,OAAO,EAAEJ,mDAAyB;MAClCM,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAEN,uCAAaO;IACvB,CAAC;IACDC,aAAa,EAAE,CAAC;EAClB,CAAC;AACH,CAAC;;ACbD,MAAM,8BAA4B;;;ACAlC,MAAM,oBAA4B;;ACAlC,MAAM,6BAA4B;;ACAlC,MAAM,qCAA4B;;;;;;ACAoH;AAsB9H;AAC0D;AACjD;AAEqB;AAU/C,MAAMgB,gBAAgB,SAASR,gCAAW,CAAuB;EAmBtES,WAAW,GAAuC;IAAA,IAAtCC,MAA+B,uEAAG,CAAC,CAAC;IAC9C,KAAK,CAACA,MAAM,CAAC;IAAC,uCAnBQP,8CAAyB;IAAA,mDAECL,kDAA6B;IAAA,uCAExCF,4CAAuB;IAAA,oDAEjB,IAAI;IAAA,yCAEZG,6CAAwB;IAAA,wDAEVE,4CAAuB;IAAA;IAAA,gDAInC;MAAEe,aAAa,EAAE;IAAG,CAAC;IAAA,kDAEP,IAAI;IAIvD,IAAI,CAACC,kBAAkB,iCAClBP,MAAM,CAACxB,eAAe;MACzBgC,WAAW,EAAER,MAAM,CAACQ,WAAW;MAC/B7B,QAAQ,EAAEqB,MAAM,CAACrB,QAAQ,IAAI,EAAE;MAC/B8B,WAAW,EAAET,MAAM,CAACS,WAAW;MAC/BC,eAAe,EAAEV,MAAM,CAACU,eAAe;MACvCC,aAAa,EAAEX,MAAM,CAACW;IAAa,GACnC;IACF,IAAI,CAAC7B,aAAa,GAAGkB,MAAM,CAAClB,aAAa,IAAI;MAAEwB,aAAa,EAAE;IAAG,CAAC;EACpE;EAEA,IAAIM,gBAAgB,GAA6B;IAC/C,OAAO,IAAI,CAACJ,WAAW,qBAAQ,IAAI,CAACA,WAAW,IAAK,IAAI;EAC1D;EAEA,IAAIK,QAAQ,GAAoC;IAAA;IAC9C,OAAO,8BAAI,CAACC,eAAe,0DAApB,sBAAsBD,QAAQ,KAAI,IAAI;EAC/C;EAEA,IAAIA,QAAQ,CAACE,CAAkC,EAAE;IAC/C,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;EACpC;EAEA,MAAMC,IAAI,CAACC,OAA2B,EAAiB;IACrD,KAAK,CAACC,+BAA+B,EAAE;IACvC,IAAI,CAAC,IAAI,CAACxC,QAAQ,EAAE,MAAMe,4DAAuC,CAAC,wDAAwD,CAAC;IAC3H,IAAI,CAAC,IAAI,CAAC2B,gBAAgB,EAAE,MAAM3B,4DAAuC,CAAC,gEAAgE,CAAC;IAC3I,IAAI4B,gBAAgB,GAAG,KAAK;IAE5B,IAAI,IAAI,CAACD,gBAAgB,CAACzC,MAAM,KAAKN,0CAAgB,IAAI,IAAI,CAAC+C,gBAAgB,CAACzC,MAAM,KAAKN,sDAA4B,EAAE;MACtH,MAAMmD,cAAc,GAAGzC,gDAAkB,EAAE;MAC3C,IAAI0C,MAAM,CAACC,IAAI,CAACF,cAAc,CAAC,CAACG,MAAM,GAAG,CAAC,IAAIH,cAAc,CAACI,IAAI,EAAE;QACjEP,gBAAgB,GAAG,IAAI;MACzB;IACF;IACA,IAAI,CAACD,gBAAgB,mCAChB,IAAI,CAACA,gBAAgB;MACxBS,oBAAoB,EAAER;IAAgB,EACvC;IACD,IAAI,CAACS,iBAAiB,GAAG,IAAIhD,qBAAS,iCACjC,IAAI,CAACsC,gBAAgB;MACxB1C,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBF,OAAO,EAAE,IAAI,CAAC4C,gBAAgB,CAAC5C,OAAO,IAAI,IAAI,CAACiC,eAAe,IAAIrC,mDAAyBK;IAAA,GAC3F;IACFc,8BAAS,CAAC,qCAAqC,CAAC;IAEhD,MAAM,IAAI,CAACuC,iBAAiB,CAACd,IAAI,EAAE;IAEnC,IAAI,CAACgB,MAAM,GAAG5C,yCAAoB;IAClC,IAAI,CAAC8C,IAAI,CAAChD,yCAAoB,EAAEM,8CAAyB,CAAC;IAE1D,IAAI;MACFD,8BAAS,CAAC,gCAAgC,CAAC;MAE3C,MAAM4C,YAAY,GAAG,IAAI,CAACC,gBAAgB,EAAE;MAC5C;MACA,IAAID,YAAY,KAAKlB,OAAO,CAACoB,WAAW,IAAIhB,gBAAgB,CAAC,EAAE;QAC7D,IAAI,CAACiB,UAAU,GAAG,IAAI;QACtB,MAAM,IAAI,CAACC,OAAO,EAAE;MACtB;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdjD,8BAAS,CAAC,kDAAkD,EAAEiD,KAAK,CAAC;MACpE,IAAI,CAACN,IAAI,CAAC,SAAS,EAAEM,KAAK,CAAC;IAC7B;EACF;EAEA,MAAMD,OAAO,GAAiG;IAAA,IAAhGxC,MAA4B,uEAAG;MAAEM,aAAa,EAAE;IAAG,CAAC;IAChE,KAAK,CAACoC,2BAA2B,EAAE;IACnC,IAAI,CAACT,MAAM,GAAG5C,8CAAyB;IACvC,IAAI,CAAC8C,IAAI,CAAChD,8CAAyB,kCAAOa,MAAM;MAAE4C,OAAO,EAAEnD,8CAAyBQ;IAAA,GAAG;IACvF,IAAI;MACF,MAAM,IAAI,CAAC4C,mBAAmB,CAAC7C,MAAM,CAAC;MACtC,OAAO,IAAI,CAACa,QAAQ;IACtB,CAAC,CAAC,OAAO4B,KAAc,EAAE;MACvBjD,8BAAS,CAAC,2CAA2C,EAAEiD,KAAK,CAAC;MAC7D;MACA,IAAI,CAACR,MAAM,GAAG5C,yCAAoB;MAClC,IAAI,CAAC8C,IAAI,CAAChD,2CAAsB,EAAEsD,KAAK,CAAC;MACxC,IAAKA,KAAK,aAALA,KAAK,eAALA,KAAK,CAAYM,OAAO,CAACC,QAAQ,CAAC,mBAAmB,CAAC,EAAE;QAC3D,MAAMrD,iDAA4B,EAAE;MACtC;MACA,MAAMA,qDAAgC,CAAC,gCAAgC,CAAC;IAC1E;EACF;EAEA,MAAMwD,UAAU,GAAoE;IAAA,IAAnEjC,OAA6B,uEAAG;MAAEkC,OAAO,EAAE;IAAM,CAAC;IACjE,IAAI,IAAI,CAACnB,MAAM,KAAK5C,6CAAwB,EAAE,MAAMM,uDAAkC,CAAC,2BAA2B,CAAC;IACnH,IAAI,CAAC,IAAI,CAACoC,iBAAiB,EAAE,MAAMrC,uDAAkC,CAAC,gCAAgC,CAAC;IACvG,MAAM,IAAI,CAACqC,iBAAiB,CAACyB,MAAM,EAAE;IACrC,IAAItC,OAAO,CAACkC,OAAO,EAAE;MACnB,IAAI,CAACnB,MAAM,GAAG5C,6CAAwB;MACtC,IAAI,CAAC0C,iBAAiB,GAAG,IAAI;MAC7B,IAAI,CAACjB,eAAe,GAAG,IAAI;IAC7B,CAAC,MAAM;MACL;MACA,IAAI,CAACmB,MAAM,GAAG5C,yCAAoB;IACpC;IAEA,IAAI,CAACkD,UAAU,GAAG,KAAK;IACvB,IAAI,CAACJ,IAAI,CAAChD,gDAA2B,CAAC;EACxC;EAEA,MAAMuE,gBAAgB,GAAiC;IACrD,IAAI,IAAI,CAACzB,MAAM,KAAK5C,6CAAwB,EAAE,MAAMM,uDAAkC,CAAC,uDAAuD,CAAC;IAC/I,MAAMgE,QAAQ,GAAG,MAAM,IAAI,CAACC,WAAW,EAAE;IACzC,OAAO;MACLC,OAAO,EAAEF,QAAQ,CAACE;IACpB,CAAC;EACH;EAEA,MAAMD,WAAW,GAA+B;IAC9C,IAAI,IAAI,CAAC3B,MAAM,KAAK5C,6CAAwB,EAAE,MAAMM,uDAAkC,CAAC,2BAA2B,CAAC;IACnH,IAAI,CAAC,IAAI,CAACoC,iBAAiB,EAAE,MAAMrC,uDAAkC,CAAC,gCAAgC,CAAC;IACvG,MAAMiE,QAAQ,GAAG,MAAM,IAAI,CAAC5B,iBAAiB,CAAC6B,WAAW,EAAE;IAC3D,OAAOD,QAAQ;EACjB;;EAEA;EACApD,kBAAkB,CAAC/B,eAAgE,EAAQ;IACzF,KAAK,CAAC+B,kBAAkB,CAAC/B,eAAe,CAAC;IACzC,MAAMsF,cAAc,GAAGvF,0BAA0B,EAAE;IACnDiB,6BAAQ,CAAC,0BAA0B,EAAEhB,eAAe,CAAC;IACrD,IAAI,CAAC6C,gBAAgB,iDAChByC,cAAc,CAACtF,eAAe,GAC9B,IAAI,CAAC6C,gBAAgB,GACrB7C,eAAe,CACnB;IACD,IAAIA,eAAe,CAACkC,eAAe,EAAE;MACnC,IAAI,CAACW,gBAAgB,CAAC5C,OAAO,GAAGD,eAAe,CAACkC,eAAe;IACjE;IACA,IAAIlC,eAAe,CAACmC,aAAa,KAAKqD,SAAS,EAAE;MAC/C,IAAI,CAAC3C,gBAAgB,CAACV,aAAa,GAAGnC,eAAe,CAACmC,aAAa;IACrE;EACF;EAEQ0B,gBAAgB,GAAG;IAAA;IACzB,IAAI,CAAC,IAAI,CAACN,iBAAiB,EAAE,OAAO,EAAE;IACtC,IAAIK,YAAY,GAAG,IAAI,CAACL,iBAAiB,CAACkC,OAAO;IACjD;IACA,IAAI,6BAAI,CAAC5C,gBAAgB,kDAArB,sBAAuBV,aAAa,IAAI,IAAI,CAACoB,iBAAiB,CAACmC,UAAU,EAAE;MAC7E9B,YAAY,GAAG,IAAI,CAACL,iBAAiB,CAACmC,UAAU;IAClD;IACA,OAAO9B,YAAY;EACrB;EAEA,MAAcS,mBAAmB,GAAsE;IAAA;IAAA,IAArE7C,MAA4B,uEAAG;MAAEM,aAAa,EAAE;IAAG,CAAC;IACpF,IAAI,CAAC,IAAI,CAACE,WAAW,EAAE,MAAMd,4DAAuC,CAAC,+CAA+C,CAAC;IACrH,IAAI,CAAC,IAAI,CAACqC,iBAAiB,EAAE,MAAMrC,uDAAkC,CAAC,gCAAgC,CAAC;IAEvG,IAAI,IAAI,CAACyE,qBAAqB,KAAK5E,4CAAuB,EAAE;MAC1D,MAAM;QAAE8E;MAAyB,CAAC,GAAG,MAAM,8FAAmC;MAC9E,IAAI,CAACvD,eAAe,GAAG,IAAIuD,wBAAwB,CAAC;QAAEC,MAAM,EAAE;UAAE9D,WAAW,EAAE,IAAI,CAACA;QAAY;MAAE,CAAC,CAAC;IACpG,CAAC,MAAM,IAAI,IAAI,CAAC2D,qBAAqB,KAAK5E,4CAAuB,EAAE;MACjE,MAAM;QAAEgF;MAA2B,CAAC,GAAG,MAAM,6FAAqC;MAClF,IAAI,CAACzD,eAAe,GAAG,IAAIyD,0BAA0B,CAAC;QAAED,MAAM,EAAE;UAAE9D,WAAW,EAAE,IAAI,CAACA;QAAY;MAAE,CAAC,CAAC;IACtG,CAAC,MAAM,IAAI,IAAI,CAAC2D,qBAAqB,KAAK5E,2CAAsB,EAAE;MAChE,IAAI,CAACuB,eAAe,GAAG,IAAIlB,sDAAwB,EAAE;IACvD,CAAC,MAAM;MACL,MAAM,IAAIoB,KAAK,CAAE,2BAA0B,IAAI,CAACmD,qBAAsB,mCAAkC,CAAC;IAC3G;IACA,MAAMM,YAAY,GAAG,IAAI,CAACpC,gBAAgB,EAAE;IAC5C;IACA,IAAI,CAACoC,YAAY,6BAAIzE,MAAM,CAAC0E,iBAAiB,kDAAxB,sBAA0BC,QAAQ,EAAE;MAAA;MACvD,IAAI,CAAC,IAAI,CAAC7F,aAAa,CAAC8F,KAAK,EAAE;QAC7B,IAAI,CAAC9F,aAAa,CAAC8F,KAAK,GACtB,IAAI,CAACT,qBAAqB,KAAK5E,4CAAuB,GAAGN,sDAA4B,GAAGA,wDAA8B;MAC1H;MACA,IAAI,CAACe,MAAM,CAACM,aAAa,IAAI,CAAC,IAAI,CAACxB,aAAa,CAACwB,aAAa,EAC5D,MAAMZ,4DAAuC,CAAC,qCAAqC,CAAC;MACtF,MAAM,IAAI,CAACqC,iBAAiB,CAACgD,KAAK,CAChClF,+BAAK,CAAC,IAAI,CAACf,aAAa,EAAEkB,MAAM,EAAE;QAChC0E,iBAAiB,kCAAQ1E,MAAM,CAAC0E,iBAAiB,IAAI,CAAC,CAAC;UAAGM,UAAU,EAAEhF,MAAM,CAACgF,UAAU,+BAAIhF,MAAM,CAAC0E,iBAAiB,2DAAxB,uBAA0BM,UAAU;QAAA;MACjI,CAAC,CAAC,CACH;IACH;IACA,IAAI5C,YAAY,GAAG,IAAI,CAACC,gBAAgB,EAAE;IAC1C,IAAID,YAAY,EAAE;MAChB,IAAI,IAAI,CAAC+B,qBAAqB,KAAK5E,4CAAuB,EAAE;QAC1D,MAAM;UAAE0F;QAAc,CAAC,GAAG,MAAM,8FAAsC;QACtE7C,YAAY,GAAG6C,aAAa,CAAC7C,YAAY,CAAC,CAAC8C,EAAE,CAACC,QAAQ,CAAC,KAAK,CAAC;MAC/D;MACA,MAAM,IAAI,CAACrE,eAAe,CAACsE,aAAa,CAAChD,YAAY,CAAC;MACtD,IAAI,CAACH,MAAM,GAAG5C,6CAAwB;MACtC,IAAI,CAAC8C,IAAI,CAAChD,6CAAwB,EAAE;QAAEyD,OAAO,EAAEnD,8CAAyB;QAAE4F,WAAW,EAAE,IAAI,CAAC9C;MAAW,CAAC,CAAyB;IACnI;EACF;AACF;;ACnPyB;AACG","sources":["webpack://@web3auth/openlogin-adapter/external commonjs2 \"@toruslabs/openlogin-ed25519\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@web3auth/ethereum-provider\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@web3auth/solana-provider\"","webpack://@web3auth/openlogin-adapter/webpack/bootstrap","webpack://@web3auth/openlogin-adapter/webpack/runtime/compat get default export","webpack://@web3auth/openlogin-adapter/webpack/runtime/create fake namespace object","webpack://@web3auth/openlogin-adapter/webpack/runtime/define property getters","webpack://@web3auth/openlogin-adapter/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/openlogin-adapter/webpack/runtime/make namespace object","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@toruslabs/openlogin\"","webpack://@web3auth/openlogin-adapter/./src/config.ts","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"@web3auth/base-provider\"","webpack://@web3auth/openlogin-adapter/external commonjs2 \"lodash.merge\"","webpack://@web3auth/openlogin-adapter/./src/openloginAdapter.ts","webpack://@web3auth/openlogin-adapter/./src/index.ts"],"sourcesContent":["module.exports = require(\"@toruslabs/openlogin-ed25519\");","module.exports = require(\"@web3auth/ethereum-provider\");","module.exports = require(\"@web3auth/solana-provider\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/openlogin\");","import { OPENLOGIN_NETWORK, UX_MODE } from \"@toruslabs/openlogin\";\n\nimport { OpenloginAdapterOptions } from \"./interface\";\n\nexport const getOpenloginDefaultOptions = (): OpenloginAdapterOptions => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP,\n    },\n    loginSettings: {},\n  };\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-provider\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"lodash.merge\");","import OpenLogin, { getHashQueryParams, LoginParams, OPENLOGIN_NETWORK, OpenLoginOptions, SUPPORTED_KEY_CURVES, UX_MODE } from \"@toruslabs/openlogin\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { CommonPrivateKeyProvider, IBaseProvider } from \"@web3auth/base-provider\";\nimport merge from \"lodash.merge\";\n\nimport { getOpenloginDefaultOptions } from \"./config\";\nimport type { LoginSettings, OpenloginAdapterOptions } from \"./interface\";\n\nexport type OpenloginLoginParams = LoginParams & {\n  // to maintain backward compatibility\n  login_hint?: string;\n};\n\ntype PrivateKeyProvider = IBaseProvider<string>;\n\nexport class OpenloginAdapter extends BaseAdapter<OpenloginLoginParams> {\n  readonly name: string = WALLET_ADAPTERS.OPENLOGIN;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.MULTICHAIN;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.IN_APP;\n\n  public openloginInstance: OpenLogin | null = null;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  private openloginOptions: OpenloginAdapterOptions[\"adapterSettings\"];\n\n  private loginSettings: LoginSettings = { loginProvider: \"\" };\n\n  private privKeyProvider: PrivateKeyProvider | null = null;\n\n  constructor(params: OpenloginAdapterOptions = {}) {\n    super(params);\n    this.setAdapterSettings({\n      ...params.adapterSettings,\n      chainConfig: params.chainConfig,\n      clientId: params.clientId || \"\",\n      sessionTime: params.sessionTime,\n      web3AuthNetwork: params.web3AuthNetwork,\n      useCoreKitKey: params.useCoreKitKey,\n    });\n    this.loginSettings = params.loginSettings || { loginProvider: \"\" };\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.openloginOptions) throw WalletInitializationError.invalidParams(\"openloginOptions is required before openlogin's initialization\");\n    let isRedirectResult = false;\n\n    if (this.openloginOptions.uxMode === UX_MODE.REDIRECT || this.openloginOptions.uxMode === UX_MODE.SESSIONLESS_REDIRECT) {\n      const redirectResult = getHashQueryParams();\n      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n        isRedirectResult = true;\n      }\n    }\n    this.openloginOptions = {\n      ...this.openloginOptions,\n      replaceUrlOnRedirect: isRedirectResult,\n    };\n    this.openloginInstance = new OpenLogin({\n      ...this.openloginOptions,\n      clientId: this.clientId,\n      network: this.openloginOptions.network || this.web3AuthNetwork || OPENLOGIN_NETWORK.MAINNET,\n    });\n    log.debug(\"initializing openlogin adapter init\");\n\n    await this.openloginInstance.init();\n\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      log.debug(\"initializing openlogin adapter\");\n\n      const finalPrivKey = this._getFinalPrivKey();\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (finalPrivKey && (options.autoConnect || isRedirectResult)) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params: OpenloginLoginParams = { loginProvider: \"\" }): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { ...params, adapter: WALLET_ADAPTERS.OPENLOGIN });\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error: unknown) {\n      log.error(\"Failed to connect with openlogin provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if ((error as Error)?.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async authenticateUser(): Promise<{ idToken: string }> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const userInfo = await this.getUserInfo();\n    return {\n      idToken: userInfo.idToken as string,\n    };\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings: Partial<OpenLoginOptions & BaseAdapterSettings>): void {\n    super.setAdapterSettings(adapterSettings);\n    const defaultOptions = getOpenloginDefaultOptions();\n    log.info(\"setting adapter settings\", adapterSettings);\n    this.openloginOptions = {\n      ...defaultOptions.adapterSettings,\n      ...this.openloginOptions,\n      ...adapterSettings,\n    };\n    if (adapterSettings.web3AuthNetwork) {\n      this.openloginOptions.network = adapterSettings.web3AuthNetwork;\n    }\n    if (adapterSettings.useCoreKitKey !== undefined) {\n      this.openloginOptions.useCoreKitKey = adapterSettings.useCoreKitKey;\n    }\n  }\n\n  private _getFinalPrivKey() {\n    if (!this.openloginInstance) return \"\";\n    let finalPrivKey = this.openloginInstance.privKey;\n    // coreKitKey is available only for custom verifiers by default\n    if (this.openloginOptions?.useCoreKitKey && this.openloginInstance.coreKitKey) {\n      finalPrivKey = this.openloginInstance.coreKitKey;\n    }\n    return finalPrivKey;\n  }\n\n  private async connectWithProvider(params: OpenloginLoginParams = { loginProvider: \"\" }): Promise<void> {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const { SolanaPrivateKeyProvider } = await import(\"@web3auth/solana-provider\");\n      this.privKeyProvider = new SolanaPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const { EthereumPrivateKeyProvider } = await import(\"@web3auth/ethereum-provider\");\n      this.privKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.privKeyProvider = new CommonPrivateKeyProvider();\n    } else {\n      throw new Error(`Invalid chainNamespace: ${this.currentChainNamespace} found while connecting to wallet`);\n    }\n    const keyAvailable = this._getFinalPrivKey();\n    // if not logged in then login\n    if (!keyAvailable || params.extraLoginOptions?.id_token) {\n      if (!this.loginSettings.curve) {\n        this.loginSettings.curve =\n          this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n      }\n      if (!params.loginProvider && !this.loginSettings.loginProvider)\n        throw WalletInitializationError.invalidParams(\"loginProvider is required for login\");\n      await this.openloginInstance.login(\n        merge(this.loginSettings, params, {\n          extraLoginOptions: { ...(params.extraLoginOptions || {}), login_hint: params.login_hint || params.extraLoginOptions?.login_hint },\n        })\n      );\n    }\n    let finalPrivKey = this._getFinalPrivKey();\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const { getED25519Key } = await import(\"@toruslabs/openlogin-ed25519\");\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.OPENLOGIN, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    }\n  }\n}\n","export * from \"./config\";\nexport * from \"./interface\";\nexport * from \"./openloginAdapter\";\n"],"names":["OPENLOGIN_NETWORK","UX_MODE","getOpenloginDefaultOptions","adapterSettings","network","MAINNET","clientId","uxMode","POPUP","loginSettings","OpenLogin","getHashQueryParams","SUPPORTED_KEY_CURVES","ADAPTER_CATEGORY","ADAPTER_EVENTS","ADAPTER_NAMESPACES","ADAPTER_STATUS","BaseAdapter","CHAIN_NAMESPACES","log","WALLET_ADAPTERS","WalletInitializationError","WalletLoginError","CommonPrivateKeyProvider","merge","OpenloginAdapter","constructor","params","OPENLOGIN","MULTICHAIN","IN_APP","NOT_READY","EIP155","loginProvider","setAdapterSettings","chainConfig","sessionTime","web3AuthNetwork","useCoreKitKey","chainConfigProxy","provider","privKeyProvider","_","Error","init","options","checkInitializationRequirements","invalidParams","openloginOptions","isRedirectResult","REDIRECT","SESSIONLESS_REDIRECT","redirectResult","Object","keys","length","_pid","replaceUrlOnRedirect","openloginInstance","debug","status","READY","emit","finalPrivKey","_getFinalPrivKey","autoConnect","rehydrated","connect","error","checkConnectionRequirements","CONNECTING","adapter","connectWithProvider","ERRORED","message","includes","popupClosed","connectionError","disconnect","cleanup","CONNECTED","notConnectedError","notReady","logout","DISCONNECTED","authenticateUser","userInfo","getUserInfo","idToken","defaultOptions","info","undefined","privKey","coreKitKey","currentChainNamespace","SOLANA","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","OTHER","keyAvailable","extraLoginOptions","id_token","curve","ED25519","SECP256K1","login","login_hint","getED25519Key","sk","toString","setupProvider","reconnected"],"sourceRoot":""}