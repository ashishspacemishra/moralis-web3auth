import { PaginatedOperation, PaginatedRequest } from 'moralis/common-core';
import { FetcherPaginatedResponse } from '../../utils/fetchers/fetcherPaginated';
import { FetchParams } from '../types';
export interface useResolverParams<Operation, Request> {
    endpoint: string;
    operation: Operation;
    request: Request;
    fetchParams?: FetchParams;
}
declare const useResolverPaginated: <Request, Response, JSONResponse>({ endpoint, operation, request, fetchParams, }: useResolverParams<Pick<PaginatedOperation<PaginatedRequest, unknown, Response, JSONResponse>, "serializeRequest" | "deserializeResponse">, Request>) => {
    data: FetcherPaginatedResponse<Response> | undefined;
    error: any;
    fetch: (params?: Request | undefined) => Promise<FetcherPaginatedResponse<Response> | undefined>;
    isFetching: boolean;
};
export default useResolverPaginated;
//# sourceMappingURL=useResolverPaginated.d.ts.map